<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\DB;

class SetupSupabaseStudentPanel extends Command
{
    protected $signature = 'supabase:setup-student-panel';
    protected $description = 'Create Supabase tables and seed Aptitude/Technical sample data for Student Panel';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $url = rtrim(config('supabase.url'), '/');
        $key = (string) config('supabase.service_role_key');
        if (!$url || !$key || str_contains($key, 'your_service_role_key_here')) {
            $this->error('SUPABASE_SERVICE_ROLE_KEY is not configured.');
            return Command::FAILURE;
        }
        $http = new Client(['timeout' => 30, 'verify' => false]);

        // Execute SQL to create tables
        $sql = <<<SQL
create table if not exists public.categories (
  id bigint generated by default as identity primary key,
  name text not null unique
);

create table if not exists public.questions (
  id bigint generated by default as identity primary key,
  category_id bigint not null references public.categories(id) on delete cascade,
  question_text text not null,
  options jsonb not null,
  correct_option text not null
);

create table if not exists public.tests (
  id bigint generated by default as identity primary key,
  user_id bigint not null,
  category_id bigint not null references public.categories(id),
  started_at timestamptz default now(),
  completed_at timestamptz
);

create table if not exists public.results (
  id bigint generated by default as identity primary key,
  test_id bigint not null references public.tests(id) on delete cascade,
  user_id bigint not null,
  score integer not null,
  total integer not null,
  created_at timestamptz default now()
);

insert into public.categories (name) values ('Aptitude') on conflict (name) do nothing;
insert into public.categories (name) values ('Technical') on conflict (name) do nothing;
SQL;

        try {
            $resp = $http->post($url . '/rest/v1/rpc', [
                'headers' => [
                    'apikey' => $key,
                    'Authorization' => 'Bearer ' . $key,
                    'Content-Type' => 'application/json',
                    'Accept' => 'application/json',
                ],
                'json' => [
                    'id' => 'pg_execute',
                    'params' => [
                        'query' => $sql,
                    ],
                ],
            ]);
        } catch (\Throwable $e) {
            $this->warn('SQL endpoint not available. Please run the SQL manually in Supabase SQL editor.');
        }

        // Seed a couple of questions per category using REST
        $this->info('Seeding sample questions...');
        // Fetch categories
        $cats = [];
        try {
            $r = $http->get($url . '/rest/v1/categories?select=id,name', [
                'headers' => [ 'apikey' => $key, 'Authorization' => 'Bearer ' . $key ],
            ]);
            $cats = json_decode((string) $r->getBody(), true) ?? [];
        } catch (\Throwable $e) {}

        $map = collect($cats)->keyBy('name');
        $aptId = optional($map->get('Aptitude'))['id'] ?? null;
        $techId = optional($map->get('Technical'))['id'] ?? null;

        $payload = [];
        if ($aptId) {
            $payload[] = [
                'category_id' => $aptId,
                'question_text' => 'What is 12 * 8?',
                'options' => json_encode(['80','88','96','108']),
                'correct_option' => '2'
            ];
            $payload[] = [
                'category_id' => $aptId,
                'question_text' => 'If a train travels 60 km in 1.5 hours, what is its average speed?',
                'options' => json_encode(['30 km/h','40 km/h','45 km/h','50 km/h']),
                'correct_option' => '2'
            ];
        }
        if ($techId) {
            $payload[] = [
                'category_id' => $techId,
                'question_text' => 'Which data structure uses FIFO?',
                'options' => json_encode(['Stack','Queue','Tree','Graph']),
                'correct_option' => '1'
            ];
            $payload[] = [
                'category_id' => $techId,
                'question_text' => 'Which SQL clause filters rows?',
                'options' => json_encode(['ORDER BY','GROUP BY','HAVING','WHERE']),
                'correct_option' => '3'
            ];
        }

        if (!empty($payload)) {
            try {
                $http->post($url . '/rest/v1/questions', [
                    'headers' => [
                        'apikey' => $key,
                        'Authorization' => 'Bearer ' . $key,
                        'Content-Type' => 'application/json',
                        'Prefer' => 'return=representation'
                    ],
                    'body' => json_encode($payload),
                ]);
                $this->info('Questions seeded.');
            } catch (\Throwable $e) {
                $this->warn('Failed to seed questions: ' . $e->getMessage());
            }
        } else {
            $this->info('No categories found to seed questions.');
        }

        $this->info('Setup completed (or partially completed). If tables still missing, run the SQL in Supabase.');
        return Command::SUCCESS;
    }
}
